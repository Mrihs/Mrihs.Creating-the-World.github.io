---
title: "Creating the World: Grafik, Design & Animation"
subtitle: "(inkl. Einführung in die 3D Modellierung mit Blender)"
format:
  pdf:
    documentclass: book
    lang: de
    toc: true
    toc-depth: 2
    number-sections: true
    number-depth: 2
    output-file: "creating_the_world_script"
    output-ext:  "pdf"
    header-includes:
    - \renewcommand{\familydefault}{\sfdefault}
    - \newcommand{\kbd}[1]{\fbox{\texttt{#1}}}
    include-in-header:
    - "assets/styles/styles.tex"
editor: source
---


\begin{tipp}{Blender unterstÃŒtzt nur noch die 64-Bit-Architektur}
Seit der Version 2.81 von Blender werden nur noch Computer mit einer 64-Bit-Architektur unterstÃŒtzt. Microsoft unterstÃŒtzt diese Systeme seit 2020 nicht mehr und auch an-dere Software-Entwickler haben den Support dieser Systeme eingestellt. 
\end{tipp}




\begin{exercise}{Blender unterstÃŒtzt nur noch die 64-Bit-Architektur}
Seit der Version 2.81 von Blender werden nur noch Computer mit einer 64-Bit-Architektur unterstÃŒtzt. Microsoft unterstÃŒtzt diese Systeme seit 2020 nicht mehr und auch an-dere Software-Entwickler haben den Support dieser Systeme eingestellt. 
\end{exercise}


\begin{remember}{Merke...}
Seit der Version 2.81 von Blender werden nur noch Computer mit einer 64-Bit-Architektur unterstÃŒtzt. Microsoft unterstÃŒtzt diese Systeme seit 2020 nicht mehr und auch an-dere Software-Entwickler haben den Support dieser Systeme eingestellt. 
\end{remember}


```{r}
#| echo: false
#| eval: true

##### To-Do
## Content at beginning
# Title Page
# Introduction
# Aknowledgment
# Link to Web-Page

## Layout
# One sided layout

## Margins
# Adjust placing

## Images
# Adjust Size
# Adjust Placing

## Boxes
# Adjust Boxes

## Header
# Booktitle in Header (always left)
# Orange box across whole page (until page ende

## Footer
# Chaptertitle on the left
# Page number on the right
# Maybe add color-box around
```


```{r}
#| echo: false
#| eval: true

# Define process_qmd function 
process_qmd <- function(file, fpath_in = "", fpath_out = "") {
  
  # Read the file
  doc <- readLines(file)
  
  # Find the line which ends the YAML-blcok (Second instance of "---")
  end_yaml <- which(doc == "---")[2]
  
  # Extract the YAML-block
  yaml_block <- doc[1:end_yaml]
  
  # Search for the line which includes the title
  title_line <- grep("^title:", yaml_block, value = TRUE)
  
  # If the title has at least one character...
  if (length(title_line) > 0) {
    # remove the "title:" tag as well as special characters
    title <- sub("^title:\\s*\"?(.*?)\"?\\s*$", "\\1", title_line)
  } 
  # Set an empty title if the title is missing
  else {title <- ""}
  
  # Save all lines expect the YAML-block
  out_doc <- doc[(end_yaml+1):length(doc)]
  
  # Replace the original path if needed
  if (fpath_in != fpath_out) {
    out_doc <- stringr::str_replace_all(out_doc, fpath_in, fpath_out)
  }
  
  # Replace Instances of "Images/Chapter_" by "Chapters/Images/Chapter_" to get the correct path
  out_doc <- stringr::str_replace_all(out_doc, "Images/Chapter_", "Chapters/Images/Chapter_")
  
  ### Remove custom "downloadbox" blocks
  # Lock for Lines which start a download-box
  start_db <- grep("^:::::: downloadbox", out_doc)
  # Find the lines which end the downloadbox
  end_db <- grep("^::::::$", out_doc)
  if (length(start_db) > 0 && length(end_db) > 0) {
    # Create a logical vector to keep or discard lines
    keep <- rep(TRUE, length(out_doc))
    # For every sequence
    for (i in seq_along(start_db)) {
      s <- start_db[i]
      # Find the first end marker that comes *after* this start
      e <- end_db[end_db > s][1]
      if (!is.na(e)) {
        keep[s:e] <- FALSE
      }
    }
    out_doc <- out_doc[keep]
  }
  
  ### Ersetze "column-margin" Blöcke durch \marginnote{...}
  # Finde Startindizes der Blöcke
  cm_start <- grep("^:::\\s*column-margin", out_doc)
  
  # Die Schleife arbeitet rückwärts, damit Indizes nach Ersetzungen nicht durcheinander kommen
  if(length(cm_start) > 0){
    for(i in rev(seq_along(cm_start))) {
      s <- cm_start[i]
      # Finde das Ende des Blocks: die nächste Zeile, die nur ":::" enthält
      # (Dabei wird angenommen, dass zwischen dem Start und Ende der Blockinhalt liegt)
      e_candidates <- which(out_doc[(s+1):length(out_doc)] == ":::")
      if(length(e_candidates) == 0) next  # Falls kein Ende gefunden, überspringen
      e <- s + e_candidates[1]
      
      # Inhalt zwischen Start und Ende zusammenfassen
      # (Hier wird angenommen, dass der Inhalt in den Zeilen s+1 bis e-1 steht)
      content <- paste(out_doc[(s+1):(e-1)], collapse = " ")
      
      # Ersetze den ganzen Block mit \marginnote{...}
      replacement <- paste0("\\marginnote{", content, "}")
      
      # Ersetze die Zeilen im Dokument:
      # Erhalte den Teil vor dem Block, füge die Ersetzung hinzu und dann den Rest des Dokuments.
      out_doc <- c(out_doc[1:(s-1)], replacement, out_doc[(e+1):length(out_doc)])
    }
  }
  
  
  
   
  ### Ersetze kbd-Tags in LaTeX kbd-Style
  # Finde den regulären Ausdruck, der den kbd-Tag im Format "{{< kbd ... >}}" erfasst
  # Er geht davon aus, dass sich nach "kbd" ein oder mehrere Wörter (Tasten) befinden, die durch Leerzeichen getrennt sind.
  kbd_pattern <- "\\{\\{<\\s*kbd\\s+([^>]+)\\s*>\\}\\}"
  
  # Iteriere über alle Zeilen und ersetze alle Vorkommnisse
  out_doc <- sapply(out_doc, function(line) {
    stringr::str_replace_all(line, kbd_pattern, function(match) {
      # Extrahiere den Inhalt des kbd-Tags (alles zwischen "kbd" und der schließenden Markierung)
      key_text <- stringr::str_match(match, kbd_pattern)[,2]
      # Entferne führende und folgende Leerzeichen und splitte in einzelne Tasten
      keys <- unlist(strsplit(trimws(key_text), "\\s+"))
      # Verbinde ggf. mehrere Tasten mit einem "+"
      joined_keys <- paste(keys, collapse = " + ")
      # Erzeuge den LaTeX-Befehl \kbd{...}
      paste0("\\kbd{", joined_keys, "}")
    })
  }, USE.NAMES = FALSE)
  
  
  ### Ersetze tippbox-Blöcke durch \begin{tipp}{...} ... \end{tipp}
  # Finde die Zeilen, in denen tippbox-Blöcke starten
  tipp_start <- grep("^::::::\\s*tippbox", out_doc)
  
  if (length(tipp_start) > 0) {
    # Bearbeite die gefundenen Blöcke von unten nach oben, damit sich Indizes nicht verschieben
    for (i in rev(seq_along(tipp_start))) {
      start_idx <- tipp_start[i]
      # Suche die dazugehörige Abschlusszeile ("::::::" ganz allein)
      end_candidates <- grep("^::::::\\s*$", out_doc[start_idx:length(out_doc)])
      if (length(end_candidates) > 0) {
        end_idx <- start_idx + end_candidates[1] - 1
      } else {
        next  # Falls kein Schlusstag gefunden wird, überspringen
      }
      
      # Extrahiere den kompletten Block inklusive der Begrenzungszeilen
      block <- out_doc[start_idx:end_idx]
      # Entferne die erste und die letzte Zeile (die reinen Block-Begrenzer)
      block_inner <- block[-c(1, length(block))]
      
      # Initialisiere Header und Body als leere Zeichenketten
      header <- ""
      body <- ""
      
      ## Header-Block verarbeiten
      header_start_idx <- grep("^::::\\s*tippbox-header", block_inner)
      if (length(header_start_idx) > 0) {
        # Die Header-Sektion endet mit einer Zeile, die nur "::::" (4 Doppelpunkte) enthält
        header_end_candidates <- grep("^::::\\s*$", block_inner[(header_start_idx[1] + 1):length(block_inner)])
        if (length(header_end_candidates) > 0) {
          header_end_idx <- header_start_idx[1] + header_end_candidates[1]
          header_block <- block_inner[(header_start_idx[1] + 1):(header_end_idx - 1)]
          
          # Entferne eventuell vorhandene Icon-Blöcke (beginnend mit "::: tippbox-icon" und endend mit ":::")
          icon_start <- grep("^:::\\s*tippbox-icon", header_block)
          if (length(icon_start) > 0) {
            icon_end_candidates <- grep("^:::\\s*$", header_block[(icon_start[1] + 1):length(header_block)])
            if (length(icon_end_candidates) > 0) {
              icon_end <- icon_start[1] + icon_end_candidates[1]
              header_block <- header_block[-(icon_start[1]:icon_end)]
            }
          }
          # Fasse den restlichen Header-Text zusammen
          header <- paste(header_block, collapse = " ")
          header <- trimws(header)
        }
      }
      
      ## Body-Block verarbeiten
      body_start_idx <- grep("^:::\\s*tippbox-body", block_inner)
      if (length(body_start_idx) > 0) {
        body_end_candidates <- grep("^:::\\s*$", block_inner[(body_start_idx[1] + 1):length(block_inner)])
        if (length(body_end_candidates) > 0) {
          body_end_idx <- body_start_idx[1] + body_end_candidates[1]
          body_block <- block_inner[(body_start_idx[1] + 1):(body_end_idx - 1)]
          body <- paste(body_block, collapse = " ")
          body <- trimws(body)
        }
      }
      
      # Erstelle die Ersatzzeile mit LaTeX-Befehl.
      # Falls der Header leer ist, können die geschweiften Klammern auch leer bleiben.
      replacement <- paste0("\\begin{tipp}{", header, "}\n", body, "\n\\end{tipp}")
      
      # Ersetze im Dokument den gesamten tippbox-Block durch den LaTeX-Code
      out_doc <- c(out_doc[1:(start_idx - 1)], replacement, out_doc[(end_idx + 1):length(out_doc)])
    }
  }
  
  
  # If a title was found, add the title in combination with a markdown-header (#) at the beginning
  if (title != "") {
    out_doc <- c(paste0("# ", title), "", out_doc)
  }
  
  # Use the modified text as child-document
  res <- knitr::knit_child(text = out_doc, quiet = TRUE, options = list(eval = FALSE, echo = TRUE))
  
  #Return the text
  return(res)
}

### Credit for the foundation of this function goes to royal-statistical-society for their function in the datavisguide project 
### https://github.com/royal-statistical-society/datavisguide/blob/main/_make_pdf.qmd
```




```{r}
#| output: asis
#| echo: false
#| eval: true
#| message: false
# List all data in the Chapter-Folder which start with "Chapter_" and have a ".qmd" suffix
 files <- list.files("Chapters/", pattern = "^Chapter_.*\\.qmd$", full.names = TRUE)
 
# # Extract the number of chapters from the filenames as integers
 numbers <- as.integer(stringr::str_extract(basename(files), "(?<=Chapter_)[0-9]+"))
 
# # Sort the chapter-files based on the extracted numbers
 files <- files[order(numbers)]
# 
# # For all chapter-files
 for (fileindex in 1:3){
#   # Get the current chapter-file
   current_file <- files[fileindex]
#   
#   # Process the current chapter
   C1 <- process_qmd(current_file)
#   
#   # Print the current chapter
   cat(unlist(C1), sep = '\n')
 }
```