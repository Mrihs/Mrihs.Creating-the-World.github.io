---
title: "24. Texturen für Parameter verwenden"
editor: visual
---

::: column-margin
Checker-Textur innerhalb von Blender erstellen
:::

Es ist auch möglich, innerhalb von Blender eigene Texturen zu emulieren. Beispielsweise kann innerhalb des Shader-Editors eine Checker-Textur hinzugefügt werden. Diese ist im Add-Menü unter «*Texture \| Checker Texture*» zu finden. Diese kann anschliessend mit der Base-Color des Principled-BSDF-Shaders verbunden werden, wie in Abbildung 1 abgebildet. Dadurch wird ein schachbrettartiges Muster aus zwei Farben erstellt und als Grundfarbe verwendet. Die Farbe kann dabei beliebig verändert werden, beispielsweise in Schwarz und Weiss, sodass eine Textur entsteht, wie sie in Abbildung 2 auf den Standardwürfel angewendet wurde. Über die beiden Farbboxen zu den Parametern «*Color1*» und «*Color2*» können die Farben verändert werden.

![Eine Checker-Textur, die mit der Base-Color des Principled-BSDF-Shaders verbunden ist.](Images/Chapter_24/Checker_Texture_Base_Color_connected.png){#fig-1_1 fig-align="left"}

::: column-margin
Checker-Textur mit Roughness verbinden
:::

Bislang wurden Texturen lediglich verwendet, um die Farbe der Oberflächen zu variieren. Es ist allerdings auch möglich, dass andere Parameter eines Shaders mittels Texturen variiert werden können. Beispielsweise könnte die Checker-Textur statt mit der Base-Color mit der Roughness verbunden werden. Abbildung 3 stellt denselben Standardwürfel wie in Abbildung 2 dar, jedoch wurde bei ihm die Checker-Textur mit dem Roughness-Input des Principled-BSDF-Shaders verbunden statt mit der Base-Color. Zusätzlich wurde die Base-Color auf blau gestellt, um die Veränderungen besser sichtbar zu machen.

![Der Standardwürfel mit einer schwarz-weissen Checker-Textur als Input für die Base-Color.](Images/Chapter_24/Checker-Texture.png){#fig-1_2 fig-align="left"}

::: column-margin
Veränderung der Roughness über die Oberfläche hinweg
:::

Was ist in Abbildung 3 mit dem Material geschehen? Die Farbe ist 
über die gesamte Oberfläche identisch – und trotzdem scheint die 
Textur einen Einfluss zu haben. In diesem Fall wurden die Farbwerte 
der Textur übernommen und mit diesen die Roughness angepasst. 
Bereiche, welche in der Abbildung 2 eine schwarze Farbe aufwiesen, sind in der Abbildung 3 nun deutlich glatter und reflektieren 
das Licht dadurch gebündelter. Bereiche, welche in der Abbildung 2 
hingegen eine weisse Farbe aufwiesen, sind in der Abbildung 3 nun 
deutlich rauer und reflektieren das Licht gestreuter. Somit variiert die Roughness nun basierend auf der Textur.

![Der Standardwürfel mit einer schwarz-weissen Checker-Textur als Input für die Roughness.](Images/Chapter_24/RoughnessChecker-Texture.png){#fig-1_3 fig-align="left"}

::: column-margin
Farbwerte können auch als Faktoren verwendet werden
:::

In diesem Beispiel wurden die Farben Schwarz und Weiss in der Checker-Textur verwendet. Schwarz weist einen RGB-Wert von 0-0-0 auf und einen HSV-Wert von 0-0-0. Weiss weist hingegen einen RGB-Wert von 1-1-1 auf und einen HSV-Wert von 0-0-1. Der Principled-BSDF-Shader hat diese Werte von der Checker-Textur übernommen und diese als Parameter für die Roughness eingestellt.

::: column-margin
Schwarz für den Wert 0, weiss für den Wert 1 und grau für die Abstufungen dazwischen
:::

An den Stellen mit einer schwarzen Farbe wird eine Roughness von 
0 eingesetzt und an den Stellen mit einer weissen Farbe eine Roughness von 1. Durch eine Verdunkelung oder eine Erhellung der 
Farben innerhalb des Checker-Texture-Nodes – dies kann im Reiter 
«*HSV*» unter der Zeile «*V*» erzielt werden – variiert auch die Roughness dementsprechend für die Bereiche, welche diese Farbe 
innehaben. Dieses Prinzip kann auch für andere Werte übernommen werden. Auch der Wert für Metallic kann mit dieser Vorgehensweise über Texturen variiert werden.


