else {title <- ""}
# Save all lines expect the YAML-block
out_doc <- doc[(end_yaml+1):length(doc)]
# Replace the original path if needed
if (fpath_in != fpath_out) {
out_doc <- stringr::str_replace_all(out_doc, fpath_in, fpath_out)
}
# Replace Instances of "Images/Chapter_" by "Chapters/Images/Chapter_" to get the correct path
out_doc <- stringr::str_replace_all(out_doc, "Images/Chapter_", "Chapters/Images/Chapter_")
### Remove custom "downloadbox" blocks
# Lock for Lines which start a download-box
start_db <- grep("^:::::: downloadbox", out_doc)
# Find the lines which end the downloadbox
end_db <- grep("^::::::$", out_doc)
if (length(start_db) > 0 && length(end_db) > 0) {
# Create a logical vector to keep or discard lines
keep <- rep(TRUE, length(out_doc))
# For every sequence
for (i in seq_along(start_db)) {
s <- start_db[i]
# Find the first end marker that comes *after* this start
e <- end_db[end_db > s][1]
if (!is.na(e)) {
keep[s:e] <- FALSE
}
}
out_doc <- out_doc[keep]
}
# If a title was found, add the title in combination with a markdown-header (#) at the beginning
if (title != "") {
out_doc <- c(paste0("# ", title), "", out_doc)
}
# Use the modified text as child-document
res <- knitr::knit_child(text = out_doc, quiet = TRUE, options = list(eval = FALSE, echo = TRUE))
#Return the text
return(res)
}
### Credit for the foundation of this function goes to royal-statistical-society for their function in the datavisguide project
### https://github.com/royal-statistical-society/datavisguide/blob/main/_make_pdf.qmd
#| echo: false
#| eval: true
# Define process_qmd function
process_qmd <- function(file, fpath_in = "", fpath_out = "") {
# Read the file
doc <- readLines(file)
# Find the line which ends the YAML-blcok (Second instance of "---")
end_yaml <- which(doc == "---")[2]
# Extract the YAML-block
yaml_block <- doc[1:end_yaml]
# Search for the line which includes the title
title_line <- grep("^title:", yaml_block, value = TRUE)
# If the title has at least one character...
if (length(title_line) > 0) {
# remove the "title:" tag as well as special characters
title <- sub("^title:\\s*\"?(.*?)\"?\\s*$", "\\1", title_line)
}
# Set an empty title if the title is missing
else {title <- ""}
# Save all lines expect the YAML-block
out_doc <- doc[(end_yaml+1):length(doc)]
# Replace the original path if needed
if (fpath_in != fpath_out) {
out_doc <- stringr::str_replace_all(out_doc, fpath_in, fpath_out)
}
# Replace Instances of "Images/Chapter_" by "Chapters/Images/Chapter_" to get the correct path
out_doc <- stringr::str_replace_all(out_doc, "Images/Chapter_", "Chapters/Images/Chapter_")
### Remove custom "downloadbox" blocks
# Lock for Lines which start a download-box
start_db <- grep("^:::::: downloadbox", out_doc)
# Find the lines which end the downloadbox
end_db <- grep("^::::::$", out_doc)
if (length(start_db) > 0 && length(end_db) > 0) {
# Create a logical vector to keep or discard lines
keep <- rep(TRUE, length(out_doc))
# For every sequence
for (i in seq_along(start_db)) {
s <- start_db[i]
# Find the first end marker that comes *after* this start
e <- end_db[end_db > s][1]
if (!is.na(e)) {
keep[s:e] <- FALSE
}
}
out_doc <- out_doc[keep]
}
# If a title was found, add the title in combination with a markdown-header (#) at the beginning
if (title != "") {
out_doc <- c(paste0("# ", title), "", out_doc)
}
# Use the modified text as child-document
res <- knitr::knit_child(text = out_doc, quiet = TRUE, options = list(eval = FALSE, echo = TRUE))
#Return the text
return(res)
}
### Credit for the foundation of this function goes to royal-statistical-society for their function in the datavisguide project
### https://github.com/royal-statistical-society/datavisguide/blob/main/_make_pdf.qmd
#| output: asis
#| echo: false
#| eval: true
#| message: false
# List all data in the Chapter-Folder which start with "Chapter_" and have a ".qmd" suffix
files <- list.files("Chapters/", pattern = "^Chapter_.*\\.qmd$", full.names = TRUE)
# Extract the number of chapters from the filenames as integers
numbers <- as.integer(stringr::str_extract(basename(files), "(?<=Chapter_)[0-9]+"))
# Sort the chapter-files based on the extracted numbers
files <- files[order(numbers)]
# For all chapter-files
for (fileindex in 1:2){
# Get the current chapter-file
current_file <- files[fileindex]
# Process the current chapter
C1 <- process_qmd(current_file)
# Print the current chapter
cat(unlist(C1), sep = '\n')
}
C1
cat(unlist(C1), sep = '\n')
cat(
### Windows
::: column-margin
cat(
cat(
)
)
)
cat(
"### Windows
::: column-margin
Installation für Windows-User
:::
Windows-Benutzer können den Link mit der Endung «*.msi*» auswählen. Nach dem Download kann die Datei geöffnet werden und die Installation konfiguriert werden.")
cat(unlist("### Windows
::: column-margin
Installation für Windows-User
:::
Windows-Benutzer können den Link mit der Endung «*.msi*» auswählen. Nach dem Download kann die Datei geöffnet werden und die Installation konfiguriert werden."), sep = '\n')
#| output: asis
#| echo: false
#| eval: true
#| message: false
# List all data in the Chapter-Folder which start with "Chapter_" and have a ".qmd" suffix
files <- list.files("Chapters/", pattern = "^Chapter_.*\\.qmd$", full.names = TRUE)
# Extract the number of chapters from the filenames as integers
numbers <- as.integer(stringr::str_extract(basename(files), "(?<=Chapter_)[0-9]+"))
# Sort the chapter-files based on the extracted numbers
files <- files[order(numbers)]
# For all chapter-files
for (fileindex in 1:3){
# Get the current chapter-file
current_file <- files[fileindex]
# Process the current chapter
C1 <- process_qmd(current_file)
# Print the current chapter
cat(unlist(C1), sep = '\n')
}
#| output: asis
#| echo: false
#| eval: true
#| message: false
# List all data in the Chapter-Folder which start with "Chapter_" and have a ".qmd" suffix
files <- list.files("Chapters/", pattern = "^Chapter_.*\\.qmd$", full.names = TRUE)
# Extract the number of chapters from the filenames as integers
numbers <- as.integer(stringr::str_extract(basename(files), "(?<=Chapter_)[0-9]+"))
# Sort the chapter-files based on the extracted numbers
files <- files[order(numbers)]
# For all chapter-files
for (fileindex in 1:3){
# Get the current chapter-file
current_file <- files[fileindex]
# Process the current chapter
C1 <- process_qmd(current_file)
# Print the current chapter
# cat(unlist(C1), sep = '\n')
}
#| echo: false
#| eval: true
# Define process_qmd function
process_qmd <- function(file, fpath_in = "", fpath_out = "") {
# Read the file
doc <- readLines(file)
# Find the line which ends the YAML-blcok (Second instance of "---")
end_yaml <- which(doc == "---")[2]
# Extract the YAML-block
yaml_block <- doc[1:end_yaml]
# Search for the line which includes the title
title_line <- grep("^title:", yaml_block, value = TRUE)
# If the title has at least one character...
if (length(title_line) > 0) {
# remove the "title:" tag as well as special characters
title <- sub("^title:\\s*\"?(.*?)\"?\\s*$", "\\1", title_line)
}
# Set an empty title if the title is missing
else {title <- ""}
# Save all lines expect the YAML-block
out_doc <- doc[(end_yaml+1):length(doc)]
# Replace the original path if needed
if (fpath_in != fpath_out) {
out_doc <- stringr::str_replace_all(out_doc, fpath_in, fpath_out)
}
# Replace Instances of "Images/Chapter_" by "Chapters/Images/Chapter_" to get the correct path
out_doc <- stringr::str_replace_all(out_doc, "Images/Chapter_", "Chapters/Images/Chapter_")
### Remove custom "downloadbox" blocks
# Lock for Lines which start a download-box
start_db <- grep("^:::::: downloadbox", out_doc)
# Find the lines which end the downloadbox
end_db <- grep("^::::::$", out_doc)
if (length(start_db) > 0 && length(end_db) > 0) {
# Create a logical vector to keep or discard lines
keep <- rep(TRUE, length(out_doc))
# For every sequence
for (i in seq_along(start_db)) {
s <- start_db[i]
# Find the first end marker that comes *after* this start
e <- end_db[end_db > s][1]
if (!is.na(e)) {
keep[s:e] <- FALSE
}
}
out_doc <- out_doc[keep]
}
### Ersetze "column-margin" Blöcke durch \marginnote{...}
# Finde Startindizes der Blöcke
cm_start <- grep("^:::\\s*column-margin", out_doc)
# Die Schleife arbeitet rückwärts, damit Indizes nach Ersetzungen nicht durcheinander kommen
if(length(cm_start) > 0){
for(i in rev(seq_along(cm_start))) {
s <- cm_start[i]
# Finde das Ende des Blocks: die nächste Zeile, die nur ":::" enthält
# (Dabei wird angenommen, dass zwischen dem Start und Ende der Blockinhalt liegt)
e_candidates <- which(out_doc[(s+1):length(out_doc)] == ":::")
if(length(e_candidates) == 0) next  # Falls kein Ende gefunden, überspringen
e <- s + e_candidates[1]
# Inhalt zwischen Start und Ende zusammenfassen
# (Hier wird angenommen, dass der Inhalt in den Zeilen s+1 bis e-1 steht)
content <- paste(out_doc[(s+1):(e-1)], collapse = " ")
# Ersetze den ganzen Block mit \marginnote{...}
replacement <- paste0("\\marginnote{", content, "}")
# Ersetze die Zeilen im Dokument:
# Erhalte den Teil vor dem Block, füge die Ersetzung hinzu und dann den Rest des Dokuments.
out_doc <- c(out_doc[1:(s-1)], replacement, out_doc[(e+1):length(out_doc)])
}
}
### Ersetze kbd-Tags in LaTeX kbd-Style
# Finde den regulären Ausdruck, der den kbd-Tag im Format "{{< kbd ... >}}" erfasst
# Er geht davon aus, dass sich nach "kbd" ein oder mehrere Wörter (Tasten) befinden, die durch Leerzeichen getrennt sind.
kbd_pattern <- "\\{\\{<\\s*kbd\\s+([^>]+)\\s*>\\}\\}"
# Iteriere über alle Zeilen und ersetze alle Vorkommnisse
out_doc <- sapply(out_doc, function(line) {
stringr::str_replace_all(line, kbd_pattern, function(match) {
# Extrahiere den Inhalt des kbd-Tags (alles zwischen "kbd" und der schließenden Markierung)
key_text <- stringr::str_match(match, kbd_pattern)[,2]
# Entferne führende und folgende Leerzeichen und splitte in einzelne Tasten
keys <- unlist(strsplit(trimws(key_text), "\\s+"))
# Verbinde ggf. mehrere Tasten mit einem "+"
joined_keys <- paste(keys, collapse = " + ")
# Erzeuge den LaTeX-Befehl \kbd{...}
paste0("\\kbd{", joined_keys, "}")
})
}, USE.NAMES = FALSE)
### NEUER CODE: Ersetze tippbox-Blöcke durch LaTeX-Umgebungen
# Suche den Beginn der tippbox-Blöcke (Zeilen, die mit ":::::: tippbox" starten)
start_tb <- grep("^:::::: tippbox", out_doc)
if(length(start_tb) > 0){
# Gehe rückwärts, damit sich Indizes nach Ersetzungen nicht verschieben
for(i in rev(seq_along(start_tb))) {
s <- start_tb[i]
# Finde das Ende des tippbox-Blocks (Erste Zeile nach s, die genau "::::::" enthält)
e_candidates <- which(out_doc[(s+1):length(out_doc)] == "::::::")
if(length(e_candidates) == 0) next
e <- s + e_candidates[1]
## Verarbeitung des Header-Teils ##
# Suche den Start des Header-Blocks
header_block <- ""
icon_tex <- ""
header_start_candidates <- grep("^:::: tippbox-header", out_doc[s:e])
if(length(header_start_candidates) > 0){
header_start <- s - 1 + header_start_candidates[1]
# Der Header-Block endet mit einer Zeile, die exakt "::::" lautet
header_end_candidates <- which(out_doc[(header_start+1):e] == "::::")
if(length(header_end_candidates) > 0){
header_end <- header_start + header_end_candidates[1]
} else {
header_end <- header_start
}
# Extrahiere den Inhalt des Header-Blocks
header_lines <- out_doc[(header_start+1):(header_end-1)]
# Suche nach einem tippbox-icon-Block innerhalb des Headers
icon_start_candidates <- grep("^::: tippbox-icon", header_lines)
if(length(icon_start_candidates) > 0){
icon_start <- icon_start_candidates[1]
icon_end_candidates <- which(header_lines[(icon_start+1):length(header_lines)] == ":::")
if(length(icon_end_candidates) > 0){
icon_end <- icon_start + icon_end_candidates[1]
} else {
icon_end <- icon_start
}
# Hier wird der Icon-Block durch einen LaTeX-Befehl ersetzt
icon_tex <- "\\tippboxicon"
# Entferne den Icon-Block aus dem Header-Inhalt
if(length(icon_start):length(icon_end) > 0)
header_lines <- header_lines[-(icon_start:icon_end)]
}
header_block <- paste(header_lines, collapse = " ")
}
## Verarbeitung des Body-Teils ##
body_block <- ""
body_start_candidates <- grep("^::: tippbox-body", out_doc[s:e])
if(length(body_start_candidates) > 0){
body_start <- s - 1 + body_start_candidates[1]
body_end_candidates <- which(out_doc[(body_start+1):e] == ":::")
if(length(body_end_candidates) > 0){
body_end <- body_start + body_end_candidates[1]
} else {
body_end <- body_start
}
body_lines <- out_doc[(body_start+1):(body_end-1)]
body_block <- paste(body_lines, collapse = "\n")
}
## Zusammenbau des LaTeX-Blocks ##
replacement <- c(
"\\begin{tippbox}",
"  \\begin{tippboxheader}",
paste0("    ", if(nzchar(icon_tex)) paste0(icon_tex, " ") else "", header_block),
"  \\end{tippboxheader}",
"  \\begin{tippboxbody}",
body_block,
"  \\end{tippboxbody}",
"\\end{tippbox}"
)
# Ersetze den gesamten tippbox-Block (von Zeile s bis e) durch den neu erzeugten LaTeX-Code
out_doc <- c(out_doc[1:(s-1)], replacement, out_doc[(e+1):length(out_doc)])
}
}
# If a title was found, add the title in combination with a markdown-header (#) at the beginning
if (title != "") {
out_doc <- c(paste0("# ", title), "", out_doc)
}
# Use the modified text as child-document
res <- knitr::knit_child(text = out_doc, quiet = TRUE, options = list(eval = FALSE, echo = TRUE))
#Return the text
return(res)
}
### Credit for the foundation of this function goes to royal-statistical-society for their function in the datavisguide project
### https://github.com/royal-statistical-society/datavisguide/blob/main/_make_pdf.qmd
#| output: asis
#| echo: false
#| eval: true
#| message: false
# List all data in the Chapter-Folder which start with "Chapter_" and have a ".qmd" suffix
files <- list.files("Chapters/", pattern = "^Chapter_.*\\.qmd$", full.names = TRUE)
# Extract the number of chapters from the filenames as integers
numbers <- as.integer(stringr::str_extract(basename(files), "(?<=Chapter_)[0-9]+"))
# Sort the chapter-files based on the extracted numbers
files <- files[order(numbers)]
# For all chapter-files
for (fileindex in 1:3){
# Get the current chapter-file
current_file <- files[fileindex]
# Process the current chapter
C1 <- process_qmd(current_file)
# Print the current chapter
# cat(unlist(C1), sep = '\n')
}
#| output: asis
#| echo: false
#| eval: true
#| message: false
# List all data in the Chapter-Folder which start with "Chapter_" and have a ".qmd" suffix
files <- list.files("Chapters/", pattern = "^Chapter_.*\\.qmd$", full.names = TRUE)
# Extract the number of chapters from the filenames as integers
numbers <- as.integer(stringr::str_extract(basename(files), "(?<=Chapter_)[0-9]+"))
# Sort the chapter-files based on the extracted numbers
files <- files[order(numbers)]
# For all chapter-files
for (fileindex in 1:3){
# Get the current chapter-file
current_file <- files[fileindex]
# Process the current chapter
C1 <- process_qmd(current_file)
# Print the current chapter
cat(unlist(C1), sep = '\n')
}
load("~/Programming/R/Demo_Data.rds")
df <- readRDS("~/Programming/R/Demo_Data.rds")
library(ggplot2)
library(ggthemes)
q <- ggplot(df, aes(x = Decade, y = Amount, fill = Gender, color = Gender)) +
stat_summary(fun = mean, geom = 'bar', width = 8.0, position = position_dodge(width = 9)) +
stat_summary(fun.data = mean_se, geom = 'errorbar', width = 3.0, linewidth = 1.0, position = position_dodge(width = 9)) +
facet_grid(rows = vars(Generation), cols = vars(Category)) +
theme_classic() +
labs(title = 'Reminiscence Bump', subtitle = 'Für Kategorien und Generationen', x = 'Dekade', y = 'Durchschnittliche Anzahl Erinnerungen', fill = 'Geschlecht', color = 'Geschlecht') +
coord_cartesian(xlim = c(-5, 55), ylim = c(0, 12), expand = FALSE) +
scale_fill_colorblind() +
scale_color_colorblind() +
theme(plot.title = element_text(family = 'sans', face = 'bold', size = 24.0, colour = 'black', hjust = 0.5),
plot.subtitle = element_text(family = 'sans', face = 'bold', size = 18.0, colour = 'black', hjust = 0.5),
axis.title.x = element_text(family = 'sans', face = 'bold', size = 14.0, colour = 'black', hjust = 0.5),
axis.title.y = element_text(family = 'sans', face = 'bold', size = 14.0, colour = 'black', hjust = 0.5),
axis.text.x = element_text(family = 'sans', face = 'bold', size = 5.0, colour = 'black', hjust = 0.5, vjust = 0.5, angle = 45),
axis.text.y = element_text(family = 'sans', face = 'bold', size = 5.0, colour = 'black', hjust = 1, vjust = 0.5, angle = 45),
axis.line.x = element_line(linetype = 'solid', size = 0.5, colour = 'black'),
axis.line.y = element_line(linetype = 'solid', size = 0.5, colour = 'black'),
axis.ticks.x = element_line(),
axis.ticks.y = element_line(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(linetype = 'dashed', size = 0.5, colour = 'grey90'),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = 'white'),
panel.background = element_rect(fill = 'white', linewidth = 12.0),
legend.title = element_text(family = 'sans', face = 'bold', size = 15.0, colour = 'black', hjust = 0.5),
legend.text = element_text(family = 'sans', face = 'bold', size = 12.0, colour = 'red', hjust = 0.5),
legend.background = element_rect(fill = 'white'),
legend.position = 'bottom',
legend.title.position = 'top',
legend.text.position = 'top',
legend.direction = 'horizontal',
legend.key.width = unit(50.0, 'pt'),
legend.key.height = unit(10.0, 'pt'),
legend.key.spacing = unit(10.0, 'pt'),
legend.box.spacing = unit(10.0, 'pt'),
strip.background.x = element_rect(fill = 'white'),
strip.background.y = element_rect(fill = 'white'),
strip.text.x = element_text(family = 'sans', face = 'bold', size = 10.0, colour = 'grey10', hjust = 0.5),
strip.text.y = element_text(family = 'sans', face = 'bold', size = 10.0, colour = 'grey10', hjust = 0.5))
q
library(ggplot2)
library(ggthemes)
q <- ggplot(df, aes(x = Decade, y = Amount, fill = Gender, color = Gender)) +
stat_summary(fun = mean, geom = 'bar', width = 8.0, position = position_dodge(width = 9)) +
stat_summary(fun.data = mean_se, geom = 'errorbar', width = 3.0, linewidth = 1.0, position = position_dodge(width = 9)) +
facet_grid(rows = vars(Generation), cols = vars(Category)) +
theme_classic() +
labs(title = 'Reminiscence Bump', subtitle = 'Für Kategorien und Generationen', x = 'Dekade', y = 'Durchschnittliche Anzahl Erinnerungen', fill = 'Geschlecht', color = 'Geschlecht') +
coord_cartesian(xlim = c(-5, 55), ylim = c(0, 12), expand = FALSE) +
scale_fill_colorblind() +
scale_color_colorblind() +
theme(plot.title = element_text(family = 'sans', face = 'bold', size = 24.0, colour = 'black', hjust = 0.5),
plot.subtitle = element_text(family = 'sans', face = 'bold', size = 18.0, colour = 'black', hjust = 0.5),
axis.title.x = element_text(family = 'sans', face = 'bold', size = 14.0, colour = 'black', hjust = 0.5),
axis.title.y = element_text(family = 'sans', face = 'bold', size = 14.0, colour = 'black', hjust = 0.5),
axis.text.x = element_text(family = 'sans', face = 'bold', size = 5.0, colour = 'black', hjust = 0.5, vjust = 0.5, angle = 45),
axis.text.y = element_text(family = 'sans', face = 'bold', size = 5.0, colour = 'black', hjust = 1, vjust = 0.5, angle = 45),
axis.line.x = element_line(linetype = 'solid', size = 0.5, colour = 'black'),
axis.line.y = element_line(linetype = 'solid', size = 0.5, colour = 'black'),
axis.ticks.x = element_line(),
axis.ticks.y = element_line(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(linetype = 'dashed', size = 0.5, colour = 'grey90'),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = 'white'),
panel.background = element_rect(fill = 'white', linewidth = 12.0),
legend.title = element_text(family = 'sans', face = 'bold', size = 15.0, colour = 'black', hjust = 0.5),
legend.text = element_text(family = 'sans', face = 'bold', size = 12.0, colour = 'red', hjust = 0.5),
legend.background = element_rect(fill = 'white'),
legend.position = 'bottom',
legend.title.position = 'top',
legend.text.position = 'top',
legend.direction = 'horizontal',
legend.key.width = unit(50.0, 'pt'),
legend.key.height = unit(10.0, 'pt'),
legend.key.spacing = unit(10.0, 'pt'),
legend.box.spacing = unit(10.0, 'pt'),
strip.background.x = element_rect(fill = 'white'),
strip.background.y = element_rect(fill = 'white'),
strip.text.x = element_text(family = 'sans', face = 'bold', size = 10.0, colour = 'grey10', hjust = 0.5),
strip.text.y = element_text(family = 'sans', face = 'bold', size = 10.0, colour = 'grey10', hjust = 0.5))
library(ggplot2)
library(ggthemes)
q <- ggplot(df, aes(x = Decade, y = Amount, fill = Gender, color = Gender)) +
stat_summary(fun = mean, geom = 'bar', width = 8.0, position = position_dodge(width = 9)) +
stat_summary(fun.data = mean_se, geom = 'errorbar', width = 3.0, linewidth = 1.0, position = position_dodge(width = 9)) +
facet_grid(rows = vars(Generation), cols = vars(Category)) +
theme_classic() +
labs(title = 'Reminiscence Bump', subtitle = 'Für Kategorien und Generationen', x = 'Dekade', y = 'Durchschnittliche Anzahl Erinnerungen', fill = 'Geschlecht', color = 'Geschlecht') +
coord_cartesian(xlim = c(-5, 55), ylim = c(0, 12), expand = FALSE) +
scale_fill_colorblind() +
scale_color_colorblind() +
theme(plot.title = element_text(family = 'sans', face = 'bold', size = 24.0, colour = 'black', hjust = 0.5),
plot.subtitle = element_text(family = 'sans', face = 'bold', size = 18.0, colour = 'black', hjust = 0.5),
axis.title.x = element_text(family = 'sans', face = 'bold', size = 14.0, colour = 'black', hjust = 0.5),
axis.title.y = element_text(family = 'sans', face = 'bold', size = 14.0, colour = 'black', hjust = 0.5),
axis.text.x = element_text(family = 'sans', face = 'bold', size = 5.0, colour = 'black', hjust = 0.5, vjust = 0.5, angle = 45),
axis.text.y = element_text(family = 'sans', face = 'bold', size = 5.0, colour = 'black', hjust = 1, vjust = 0.5, angle = 45),
axis.line.x = element_line(linetype = 'solid', size = 0.5, colour = 'black'),
axis.line.y = element_line(linetype = 'solid', size = 0.5, colour = 'black'),
axis.ticks.x = element_line(),
axis.ticks.y = element_line(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(linetype = 'dashed', size = 0.5, colour = 'grey90'),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
plot.background = element_rect(fill = 'white'),
panel.background = element_rect(fill = 'white', linewidth = 12.0),
legend.title = element_text(family = 'sans', face = 'bold', size = 15.0, colour = 'black', hjust = 0.5),
legend.text = element_text(family = 'sans', face = 'bold', size = 12.0, colour = 'red', hjust = 0.5),
legend.background = element_rect(fill = 'white'),
legend.position = 'bottom',
legend.title.position = 'top',
legend.text.position = 'top',
legend.direction = 'horizontal',
legend.key.width = unit(50.0, 'pt'),
legend.key.height = unit(10.0, 'pt'),
legend.key.spacing = unit(10.0, 'pt'),
legend.box.spacing = unit(10.0, 'pt'),
strip.background.x = element_rect(fill = 'white'),
strip.background.y = element_rect(fill = 'white'),
strip.text.x = element_text(family = 'sans', face = 'bold', size = 10.0, colour = 'grey10', hjust = 0.5),
strip.text.y = element_text(family = 'sans', face = 'bold', size = 10.0, colour = 'grey10', hjust = 0.5))
q
